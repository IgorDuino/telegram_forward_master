#!venv/bin/python

from turtle import forward
from decouple import config
from db_session import global_init, create_session
from models import Rule, Filter, User
import telebot
import menu


api_token = config("BOT_API", cast=str)

bot = telebot.TeleBot(api_token)

temp_rules = {}
temp_filters = {}


def add_rule(chat_id):
    temp_rule = temp_rules[chat_id]
    sessioin = create_session()
    rule = Rule(
        name=temp_rule['name'],
        first_user_tg_id=temp_rule['first_user_id'],
        second_user_tg_id=temp_rule['second_user_id'],
        direction=temp_rule['direction'],
        # is_automated=temp_rule['is_automated']
        is_automated=True
    )
    sessioin.add(rule)
    sessioin.commit()
    del temp_rules[chat_id]
    return rule


def add_filter(chat_id):
    temp_filter = temp_filters[chat_id]
    sessioin = create_session()
    filter = Filter(
        rule_id=temp_filter['rule_id'],
        replace_word=temp_filter['replace_word'],
        to_replace_word=temp_filter['replace_to_word']
    )
    sessioin.add(filter)
    sessioin.commit()
    del temp_filters[chat_id]
    return filter.id


def enable_rule(rule: Rule):
    sessioin = create_session()
    real_rule = sessioin.query(Rule).filter(Rule.id == rule.id).first()
    real_rule.is_enabled = True
    sessioin.commit()
    return True


def disable_rule(rule: Rule):
    sessioin = create_session()
    real_rule = sessioin.query(Rule).filter(Rule.id == rule.id).first()
    real_rule.is_enabled = False
    sessioin.commit()
    return True


def enable_filter(filter: Filter):
    sessioin = create_session()
    real_filter = sessioin.query(Filter).filter(Filter.id == filter.id).first()
    real_filter.is_enabled = True
    sessioin.commit()
    return True


def disable_filter(filter: Filter):
    sessioin = create_session()
    real_filter = sessioin.query(Filter).filter(Filter.id == filter.id).first()
    real_filter.is_enabled = False
    sessioin.commit()
    return True


def delete_rule_by_id(rule_id):
    sessioin = create_session()
    rule = sessioin.query(Rule).filter(Rule.id == rule_id).first()
    sessioin.delete(rule)
    sessioin.commit()
    return True


def delete_filter_by_id(filter_id):
    sessioin = create_session()
    filter = sessioin.query(Filter).filter(Filter.id == filter_id).first()
    sessioin.delete(filter)
    sessioin.commit()
    return True


def set_user_status(tg_id, status):
    sessioin = create_session()
    user = sessioin.query(User).filter(User.tg_id == tg_id).first()
    user.status = status
    sessioin.commit()
    return True


def get_forward_from_account(message: telebot.types.Message):
    return message.forward_from


def get_user(tg_id):
    sessioin = create_session()
    user = sessioin.query(User).filter(User.tg_id == tg_id).first()
    return user


def get_rule_by_id(rule_id):
    sessioin = create_session()
    rule = sessioin.query(Rule).filter(Rule.id == rule_id).first()
    return rule


def get_rules():
    sessioin = create_session()
    rules = sessioin.query(Rule).all()
    return rules


def get_filter_by_id(filter_id):
    sessioin = create_session()
    filter = sessioin.query(Filter).filter(Filter.id == filter_id).first()
    return filter


def get_filters(rule: Rule):
    sessioin = create_session()
    filters = sessioin.query(Filter).filter(Filter.rule_id == rule.id).all()
    return filters


def add_filter_replace_word(message: telebot.types.Message):
    temp_filters[message.chat.id]['replace_word'] = message.text

    msg = bot.send_message(
        message.chat.id, "–°–æ—Ö—Ä–∞–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ —á—Ç–æ –µ–≥–æ –∑–∞–º–µ–Ω—è—Ç—å \n* —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ –£–î–ê–õ–ò–¢–¨\n*—á—Ç–æ–±—ã –æ—Ç–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –≤ –Ω—ë–º –Ω–∞–ø–∏—à–∏—Ç–µ –û–¢–ú–ï–ù–ò–¢–¨\n*—á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –¥–æ –µ–≥–æ —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –û–¢–ö–õ–Æ–ß–ò–¢–¨")
    bot.register_next_step_handler(msg, add_filter_replace_to_word)


def add_filter_replace_to_word(message: telebot.types.Message):
    replace_to_word = message.text

    if replace_to_word == "–£–î–ê–õ–ò–¢–¨":
        replace_to_word = ""

    temp_filters[message.chat.id]['replace_to_word'] = replace_to_word

    chat_id = message.chat.id
    filter_id = add_filter(chat_id)
    if filter_id:
        filter = get_filter_by_id(filter_id)
        msg = bot.send_message(
            message.chat.id, "–§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω \n*—Å–ª–æ–≤–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ –≤–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞:", reply_markup=menu.filter_menu(filter))
    else:
        msg = bot.send_message(
            message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=menu.main_menu(get_user(message.chat.id)))


def add_rule_first_user_contact_name(message: telebot.types.Message):
    temp_rules[message.chat.id]['first_user_id'] = message.text

    msg = bot.send_message(
        message.chat.id, "–°–æ—Ö—Ä–∞–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.register_next_step_handler(msg, add_rule_second_user)


def add_rule_second_user_contact_name(message: telebot.types.Message):
    temp_rules[message.chat.id]['second_user_id'] = message.text

    msg = bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n1. –í –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã\n2. –û—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ç–æ—Ä–æ–º—É\n3. –û—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–≤–æ–º—É\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1, 2 –∏–ª–∏ 3")
    bot.register_next_step_handler(msg, add_rule_direction)


def add_rule_first_user(message: telebot.types.Message):
    if not message.forward_from and not message.forward_sender_name:
        msg = bot.send_message(
            message.chat.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bot.register_next_step_handler(msg, add_rule_first_user)
        return

    if message.forward_from:
        forward_id = message.forward_from.id
        forward_name = message.forward_from.first_name
    else:
        # there is not all the necessary data -> request a name in contacts
        forward_name = message.forward_sender_name

        temp_rules[message.chat.id] = {
            'first_user_id': None,
            'second_user_id': None,
            'first_user_name': forward_name,
            'second_user_name': None,
            'type': None
        }
        msg = bot.send_message(
            message.chat.id, "–ò–∑-–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –µ–≥–æ ID.  \n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã Telgram –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–æ, –∫–∞–∫ –µ–≥–æ –Ω–∞–∑–≤–∞–ª–∏ —Ç–æ–Ω–æ.")
        bot.register_next_step_handler(msg, add_rule_first_user_contact_name)
        return

    temp_rules[message.chat.id] = {
        'first_user_id': forward_id,
        'second_user_id': None,
        'first_user_name': forward_name,
        'second_user_name': None,
        'type': None,
        'filters': []
    }

    msg = bot.send_message(
        message.chat.id, "–°–æ—Ö—Ä–∞–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.register_next_step_handler(msg, add_rule_second_user)


def add_rule_second_user(message: telebot.types.Message):
    if not message.forward_from and not message.forward_sender_name:
        msg = bot.send_message(
            message.chat.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bot.register_next_step_handler(msg, add_rule_second_user)
        return

    if message.forward_from:
        forward_id = message.forward_from.id
        forward_name = message.forward_from.first_name

    else:
        # there is not all the necessary data -> request a name in contacts
        forward_name = message.forward_sender_name

        temp_rules[message.chat.id]['second_user_name'] = forward_name

        msg = bot.send_message(
            message.chat.id, "–ò–∑-–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –µ–≥–æ ID.  \n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã Telgram –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–æ, –∫–∞–∫ –µ–≥–æ –Ω–∞–∑–≤–∞–ª–∏ —Ç–æ–Ω–æ.")
        bot.register_next_step_handler(msg, add_rule_second_user_contact_name)
        return

    temp_rules[message.chat.id]['second_user_id'] = forward_id
    temp_rules[message.chat.id]['second_user_name'] = forward_name

    msg = bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n1. –í –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã\n2. –û—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ç–æ—Ä–æ–º—É\n3. –û—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–≤–æ–º—É\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1, 2 –∏–ª–∏ 3")
    bot.register_next_step_handler(msg, add_rule_direction)


def add_rule_direction(message: telebot.types.Message):
    if message.text in ['1', '2', '3']:
        temp_rules[message.chat.id]['direction'] = message.text
    else:
        msg = bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1, 2 –∏–ª–∏ 3")
        bot.register_next_step_handler(msg, add_rule_direction)
        return
    direction_emodji = ['üîÑ', '‚û°', '‚¨Ö']
    temp_rules[message.chat.id][
        'name'] = f"{temp_rules[message.chat.id]['first_user_name']} {direction_emodji[int(temp_rules[message.chat.id]['direction']) - 1]} {temp_rules[message.chat.id]['second_user_name']}"

    rule = add_rule(message.chat.id)
    keyboard = menu.main_menu(get_user(message.chat.id).status)

    if rule:
        msg = bot.send_message(
            message.chat.id, "–ü—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=keyboard)
    else:
        msg = bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=keyboard)


@bot.message_handler(commands=['start', 'help'])
def handle_forwarded_message(message: telebot.types.Message):
    if str(message.chat.id) != config('TELEGRAM_ID', cast=str):
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    user = get_user(message.chat.id)
    if not user:
        user = User(tg_id=message.chat.id)
        sessioin = create_session()
        sessioin.add(user)
        sessioin.commit()
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                     reply_markup=menu.main_menu(user.status))


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call: telebot.types.CallbackQuery):
    if call.data == "main-menu":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=menu.main_menu(get_user(call.message.chat.id).status)
        )
    elif call.data == 'all-rules':
        rules = get_rules()
        if len(rules) == 0:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª",
                reply_markup=menu.main_menu(
                    get_user(call.message.chat.id).status))
        else:
            keyboard = menu.rules_menu(rules)

            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞", reply_markup=keyboard)

    elif call.data.startswith('filters_'):
        rule_id = call.data.split('_')[1]
        rule = get_rule_by_id(rule_id)
        if not rule:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=menu.main_menu(
                    get_user(call.message.chat.id).status))
        else:
            keyboard = menu.filters_menu(rule)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä—ã", reply_markup=keyboard)

    elif call.data == 'add-rule':
        msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id, text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        bot.register_next_step_handler(msg, add_rule_first_user)

    elif call.data.startswith('rule_'):
        rule_id = int(call.data.split('_')[1])
        rule = get_rule_by_id(rule_id)
        if not rule:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return
        keyboard = menu.rule_menu(rule)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text=f"–ü—Ä–∞–≤–∏–ª–æ [{rule.id + 1}] {rule.name}", reply_markup=keyboard)

    elif call.data.startswith('filter_'):
        filter_id = int(call.data.split('_')[1])
        filter = get_filter_by_id(filter_id)
        if not filter:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return
        keyboard = menu.filter_menu(filter)
        title = f"{filter.replace_word} -> {filter.to_replace_word}"
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text=f"–§–∏–ª—å—Ç—Ä {title}", reply_markup=keyboard)

    # delete rule
    elif call.data.startswith('delete-rule_'):
        rule_id = int(call.data.split('_')[1])
        rule = get_rule_by_id(rule_id)
        if not rule:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return
        if delete_rule_by_id(rule.id):
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))

    # delete filter
    elif call.data.startswith('delete-filter_'):
        filter_id = int(call.data.split('_')[1])
        filter = get_filter_by_id(filter_id)
        if not filter:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return

        rule = get_rule_by_id(filter.rule_id)

        if delete_filter_by_id(filter.id):
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω", reply_markup=menu.filters_menu(rule))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))

    # enable rule
    elif call.data.startswith('enable-rule_'):
        rule_id = int(call.data.split('_')[1])
        rule = get_rule_by_id(rule_id)
        if not rule:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return
        if enable_rule(rule):
            rule = get_rule_by_id(rule.id)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–∞–≤–∏–ª–æ –≤–∫–ª—é—á–µ–Ω–æ", reply_markup=menu.rule_menu(rule))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))

    # disable rule
    elif call.data.startswith('disable-rule_'):
        rule_id = int(call.data.split('_')[1])
        rule = get_rule_by_id(rule_id)
        if not rule:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return
        if disable_rule(rule):
            rule = get_rule_by_id(rule.id)

            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–∞–≤–∏–ª–æ –≤—ã–∫–ª—é—á–µ–Ω–æ", reply_markup=menu.rule_menu(rule))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))

    # enable filter
    elif call.data.startswith('enable-filter_'):
        filter_id = int(call.data.split('_')[1])
        filter = get_filter_by_id(filter_id)
        if not filter:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return
        if enable_filter(filter):
            filter = get_filter_by_id(filter.id)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–µ–Ω", reply_markup=menu.filter_menu(filter))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))

    # disable filter
    elif call.data.startswith('disable-filter_'):
        filter_id = int(call.data.split('_')[1])
        filter = get_filter_by_id(filter_id)
        if not filter:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
            return
        if disable_filter(filter):
            filter = get_filter_by_id(filter.id)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–§–∏–ª—å—Ç—Ä –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=menu.filter_menu(filter))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=menu.main_menu(
                                      get_user(call.message.chat.id).status))
    # add filter
    elif call.data.startswith('add-filter_'):
        rule_id = int(call.data.split('_')[1])
        msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id, text="–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω—è—Ç—å?")

        temp_filters[call.message.chat.id] = {'rule_id': rule_id}

        bot.register_next_step_handler(msg, add_filter_replace_word)

    elif call.data == 'start':
        set_user_status(call.message.chat.id, True)
        user = get_user(call.message.chat.id)

        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup=menu.main_menu(user.status))
    elif call.data == 'stop':
        set_user_status(call.message.chat.id, False)
        user = get_user(call.message.chat.id)

        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text="–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω", reply_markup=menu.main_menu(user.status))


def main():
    db_name = config('POSTGRES_DB', cast=str)
    db_user = config('POSTGRES_USER', cast=str)
    db_password = config('POSTGRES_PASSWORD', cast=str)
    db_host = config('DB_HOST', cast=str)
    db_port = config('POSTGRES_PORT', cast=int)

    global_init(db_user, db_password, db_host, db_port, db_name)
    bot.infinity_polling()


if __name__ == '__main__':
    print("Starting bot")
    main()

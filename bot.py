from decouple import config
from data.db_session import global_init, create_session
from data.models import Rule, Filter
import sqlalchemy
import telebot
import menu
import json

api_token = config("BOT_API", cast=str)
db_user = config('DB_USER')
db_password = config('DB_PASSWORD')
db_host = config('DB_HOST')
db_name = config('DB_NAME')


bot = telebot.TeleBot(api_token)

temp_rules = {}


def get_forward_from_account(message: telebot.types.Message):
    return message.forward_from


def get_rules():
    sessioin = create_session()
    rules = sessioin.query(Rule).all()
    return rules


def get_filters(rule: Rule):
    sessioin = create_session()
    filters = sessioin.query(Filter).filter(Filter.rule_id == rule.id).all()
    return filters


def add_rule_name(message: telebot.types.Message):
    temp_rules[message.chat.id] = {
        'name': message.text,
        'first_user_id': None,
        'second_user_id': None,
        'type': None,
        'filters': []
    }

    msg = bot.send_message(
        message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.register_next_step_handler(msg, add_rule_first_user)


def add_rule_first_user(message: telebot.types.Message):
    if not message.forward_from:
        msg = bot.send_message(
            message.chat.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bot.register_next_step_handler(msg, add_rule_first_user)
        return

    temp_rules[message.chat.id]['first_user_id'] = message.forward_from.id
    msg = bot.send_message(
        message.chat.id, "–°–æ—Ö—Ä–∞–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.register_next_step_handler(msg, add_rule_second_user)


def add_rule_second_user(message: telebot.types.Message):
    if not message.forward_from:
        msg = bot.send_message(
            message.chat.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bot.register_next_step_handler(msg, add_rule_second_user)
        return

    temp_rules[message.chat.id]['second_user_id'] = message.forward_from.id
    msg = bot.send_message(
        message.chat.id, "–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–µ—Ä–µ—Å—ã–ª–∫–∏.\n1. –í –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã\n2. –û—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ç–æ—Ä–æ–º—É\n3. –û—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–≤–æ–º—É\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1, 2 –∏–ª–∏ 3")
    bot.register_next_step_handler(msg, add_rule_type)


def add_rule_type(message: telebot.types.Message):
    if message.text in ['1', '2', '3']:
        temp_rules[message.chat.id]['type'] = message.text
    else:
        msg = bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1, 2 –∏–ª–∏ 3")
        bot.register_next_step_handler(msg, add_rule_type)
        return

    msg = bot.send_message(
        message.chat.id, "–ü—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=menu.get_menu(message.chat.id))
    bot.register_next_step_handler(msg, add_rule_replace_word)


@bot.message_handler(commands=['start', 'help'])
def handle_forwarded_message(message: telebot.types.Message):
    bot.send_message(message.chat.id, reply_markup=menu.main_menu())


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call: telebot.types.CallbackQuery):
    if call.data == 'all_rules':
        rules = get_rules()
        keyboard = menu.get_rules_menu(rules)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text="–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞", reply_markup=keyboard)
    elif call.data == 'add_rule':
        msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞")

        bot.register_next_step_handler(msg, add_rule_name)
    elif call.data == 'start':
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text="–í–∫–ª—é—á–µ–Ω–æ üü©")
    elif call.data == 'stop':
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text="–û—Ç–∫–ª—é—á–µ–Ω–æ üü•")


if __name__ == '__main__':
    global_init(db_user, db_password, db_host, db_name)
    bot.infinity_polling()
